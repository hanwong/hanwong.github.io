{"meta":{"title":"Woong's blog.","subtitle":null,"description":null,"author":"Woong","url":"http://hanwong.github.io"},"pages":[{"title":"Categories","date":"2017-05-06T05:20:20.000Z","updated":"2017-05-06T05:23:48.000Z","comments":true,"path":"categories/index.html","permalink":"http://hanwong.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2017-05-06T05:47:17.000Z","updated":"2017-05-06T05:47:17.000Z","comments":true,"path":"about/index.html","permalink":"http://hanwong.github.io/about/index.html","excerpt":"","text":"An evangelist who wants to spread the gospel to the ends of the earth by coding. 2016.11 - Current : Front-end Developer at NewsJelly 2014.03 - 2016.04 : UX Designer at pxd"},{"title":"Tags","date":"2017-05-06T05:22:27.000Z","updated":"2017-05-06T05:23:44.000Z","comments":true,"path":"tags/index.html","permalink":"http://hanwong.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"VueJS | Stock-Trader Project Tutorial (3)","slug":"vue-stock-trader-03","date":"2017-05-03T15:00:00.000Z","updated":"2017-05-06T06:04:54.000Z","comments":true,"path":"2017/05/04/vue-stock-trader-03/","link":"","permalink":"http://hanwong.github.io/2017/05/04/vue-stock-trader-03/","excerpt":"이 포스팅은 Max의 Vuejs 강좌 내용을 정리한 것이고, VueJS의 개념을 익히고 연습해보기 위한 튜토리얼을 다룬 글 입니다. 이전 포스팅에서는 vuex를 활용한 프로젝트의 상태 관리 환경 세팅과 vuex의 기본적인 사용방법에 대해서 알아 보았습니다. 이번 포스팅에서는 또 다른 컴포넌트의 상태 관리 설정을 추가하고 컴포넌트 간의 상태 변화에 따라 뷰가 갱신될 수 있도록 구현해보겠습니다.","text":"이 포스팅은 Max의 Vuejs 강좌 내용을 정리한 것이고, VueJS의 개념을 익히고 연습해보기 위한 튜토리얼을 다룬 글 입니다. 이전 포스팅에서는 vuex를 활용한 프로젝트의 상태 관리 환경 세팅과 vuex의 기본적인 사용방법에 대해서 알아 보았습니다. 이번 포스팅에서는 또 다른 컴포넌트의 상태 관리 설정을 추가하고 컴포넌트 간의 상태 변화에 따라 뷰가 갱신될 수 있도록 구현해보겠습니다. 1. Portfolio 컴포넌트 생성하기 기본적인 Portfolio 컴포넌트 구성은 이전 포스팅에서 Stocks 컴포넌트를 구성한 방법과 유사하므로 코드만 첨부하고 넘어가겠습니다. src/components/portfolio/Stock.vue1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;template&gt; &lt;div class=\"col-md-4 col-sm-6\"&gt; &lt;div class=\"panel panel-info\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h3 class=\"panel-title\"&gt; &#123;&#123; propStock.name &#125;&#125; &lt;small&gt;(Price: &#123;&#123; propStock.price &#125;&#125; | Quantity: &#123;&#123;propStock.quantity &#125;&#125;)&lt;/small&gt; &lt;/h3&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;div class=\"pull-left\"&gt; &lt;input type=\"number\" class=\"form-control\" placeholder=\"Quantity\" v-model.number=\"quantity\" &gt; &lt;/div&gt; &lt;div class=\"pull-right\"&gt; &lt;button class=\"btn btn-success\" @click=\"sellStock\" :disabled=\"quantity &lt;= 0 || !Number.isInteger(quantity)\" &gt;Sell&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; props: ['propStock'], data() &#123; return &#123; quantity: 0 &#125; &#125;, methods: &#123; sellStock() &#123; const order = &#123; stockId: this.propStock.id, stockPrice: this.propStock.price, quantity: this.quantity &#125;; &#125; &#125; &#125;&lt;/script&gt; src/components/portfolio/Portfolio.vue12345678910111213141516171819&lt;template&gt; &lt;div&gt; &lt;app-stock v-for=\"stock in stocks\" :propStock=\"stock\"&gt;&lt;/app-stock&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Stock from './Stock.vue'; export default &#123; data() &#123; return &#123; stocks: [] // 이 단계에서는 임시적으로 data에 stocks를 추가하여 사용하고 portfolio store module 설정 후 수정할것 입니다. &#125; &#125;, components: &#123; appStock: Stock &#125; &#125;&lt;/script&gt; 2. Portfolio store module 생성하기src/store/modules/portfolio.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758const state = &#123; funds: 10000, stocks: []&#125;;const mutations = &#123; 'BUY_STOCK'(state, &#123;stockId, quantity, stockPrice&#125;) &#123; const record = state.stocks.find(element =&gt; element.id === stockId); if(record) &#123; record.quantity += quantity; &#125; else &#123; state.stocks.push(&#123; id: stockId, quantity: quantity &#125;); &#125; state.funds -= stockPrice * quantity; &#125;, 'SELL_STOCK'(state, &#123;stockId, quantity, stockPrice&#125;) &#123; const record = state.stocks.find(element =&gt; element.id === stockId); if(record.quantity &gt; quantity) &#123; record.quantity -= quantity; &#125; else &#123; state.stocks.splice(state.stocks.indexOf(record), 1); &#125; state.funds += stockPrice * quantity; &#125;&#125;;const actions = &#123; sellStock(&#123;commit&#125;, order) &#123; commit('SELL_STOCK', order); &#125;&#125;;const getters = &#123; stockPortfolio(state, getters) &#123; return state.stocks.map(stock =&gt; &#123; const record = getters.stocks.find(element =&gt; element.id === stock.id); return &#123; id: stock.id, quantity: stock.quantity, name: record.name, price: record.price &#125; &#125;); &#125;, funds(state) &#123; return state.funds; &#125;&#125;;export default &#123; state, mutations, actions, getters&#125; 1. 먼저 - 끝 - p { margin: 0; } video, p img { width: 100%; box-shadow:0 10px 16px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19); }","categories":[{"name":"VueJS","slug":"VueJS","permalink":"http://hanwong.github.io/categories/VueJS/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://hanwong.github.io/tags/vue/"},{"name":"vuejs","slug":"vuejs","permalink":"http://hanwong.github.io/tags/vuejs/"},{"name":"vue-resource","slug":"vue-resource","permalink":"http://hanwong.github.io/tags/vue-resource/"},{"name":"components","slug":"components","permalink":"http://hanwong.github.io/tags/components/"},{"name":"vue-router","slug":"vue-router","permalink":"http://hanwong.github.io/tags/vue-router/"},{"name":"vuex","slug":"vuex","permalink":"http://hanwong.github.io/tags/vuex/"}]},{"title":"VueJS | Stock-Trader Project Tutorial (2)","slug":"vue-stock-trader-02","date":"2017-04-30T15:00:00.000Z","updated":"2017-05-06T05:03:56.000Z","comments":true,"path":"2017/05/01/vue-stock-trader-02/","link":"","permalink":"http://hanwong.github.io/2017/05/01/vue-stock-trader-02/","excerpt":"이 포스팅은 Max의 Vuejs 강좌 내용을 정리한 것이고, VueJS의 개념을 익히고 연습해보기 위한 튜토리얼을 다룬 글 입니다. 이번 포스팅에서는 프로젝트의 상태 관리를 위한 vuex 환경을 세팅하고 상태 변화에 따라 View의 변화를 확인 할 수 있도록 구현하고자 합니다.","text":"이 포스팅은 Max의 Vuejs 강좌 내용을 정리한 것이고, VueJS의 개념을 익히고 연습해보기 위한 튜토리얼을 다룬 글 입니다. 이번 포스팅에서는 프로젝트의 상태 관리를 위한 vuex 환경을 세팅하고 상태 변화에 따라 View의 변화를 확인 할 수 있도록 구현하고자 합니다. 1. Stock 컴포넌트 생성하기 가장 먼저 아래 그림과 같이 UI를 구현합니다. props: [&#39;stock&#39;] 는 상위 컴포넌트로 부터 데이타를 받아오기 위한 설정입니다. 그러면 현재 템플릿 안에서 와 같이 설정된 이름으로 변수를 설정 할 수 있습니다. 부모 컴포넌트에서 데이타를 전달 할 때는 전달할이름=&quot;부모컴포넌트내부데이타&quot;와 같이 부모 컴포넌트에서 자식 컴포넌트를 사용하는 태그 내에 속성으로 적용하면 됩니다. 그리고 데이타를 전송하기 위해서 Buy 버튼에는 클릭을 했을 때 buyStock 메소드를 사용하도록 설정해줍니다. 템플릿 내부의 디렉티브나 스크립트 부분에 사용하는 메소드 같은 기본적인 개념들은 VueJS에 아주 친절하게 설명되어 있으니 참고 하시기 바랍니다. src/components/stocks/Stock.vue12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;div class=\"col-md-4 col-sm-6\"&gt; &lt;div class=\"panel panel-success\"&gt; &lt;div class=\"panel-heading\"&gt; &lt;h3 class=\"panel-title\"&gt; &#123;&#123; stock.name &#125;&#125; &lt;!-- 상위 컴포넌트로 부터 전달 받은 props 데이타 --&gt; &lt;small&gt;(Price: &#123;&#123; stock.price &#125;&#125; )&lt;/small&gt; &lt;/h3&gt; &lt;/div&gt; &lt;div class=\"panel-body\"&gt; &lt;div class=\"pull-left\"&gt; &lt;input type=\"number\" class=\"form-control\" placeholder=\"Quantity\" v-model.number=\"quantity\" &gt; &lt;/div&gt; &lt;div class=\"pull-right\"&gt; &lt;button class=\"btn btn-success\" @click=\"buyStock\" :disabled=\"quantity &lt;= 0 || !Number.isInteger(quantity)\" &gt;Buy&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; props: ['stock'], data() &#123; return &#123; quantity: 0 &#125; &#125;, methods: &#123; buyStock() &#123; const order = &#123; stockId: this.stock.id, stockPrice: this.stock.price, quantity: this.quantity, &#125;; console.log(order); this.quantity = 0; &#125; &#125; &#125;&lt;/script&gt; 이전 포스팅에서 stocks 폴더 내에는 Stocks.vue, Stock.vue 파일을 생성하였습니다. 위에서 구현한 Stock.vue 내용은 위 그림처럼 데이타에 따라 하나의 박스를 그려 줍니다. 그리고 Stocks.vue에서는 가지고 있는 데이타에 따라서 Stock.vue를 반복적으로 사용합니다. 위에서 생성한 Stock.vue 파일을 import 해주고 components 에 사용할 이름을 설정해줍니다. 컴포넌트 이름을 설정할때는 보통 &lt;script&gt; 부분에서 camelCase 방식으로 선언하면 &lt;template&gt; 부분에서 kebab-case 방식으로 해당 컴포넌트를 사용 할 수 있습니다. 세팅된 컴포넌트는 data 에 있는 stocks 데이타에 따라 컴포넌트들을 출력해줍니다. src/components/stocks/Stocks.vue123456789101112131415161718192021222324&lt;template&gt; &lt;div&gt; &lt;app-stock v-for=\"stock in stocks\" :stock=\"stock\"&gt;&lt;/app-stock&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Stock from './Stock.vue'; export default &#123; data() &#123; return &#123; stocks: [ &#123; id: 1, name: 'BENZ', price: 200&#125;, &#123; id: 2, name: 'AUDI', price: 150&#125;, &#123; id: 3, name: 'HONDA', price: 180&#125;, &#123; id: 4, name: 'LEXUS', price: 195&#125; ] &#125; &#125;, components: &#123; appStock: Stock &#125; &#125;&lt;/script&gt; 2. Vuex 환경 세팅하기1. vuex 모듈 설치 및 파일 생성 먼저 npm install --save vuex로 vuex를 설치해줍니다. 그리고 아래 파일 구조에 맞게 store 폴더 내에 파일들을 생성해줍니다. 이 프로젝트에서 vuex 환경은 컴포넌트 단위 별로 modules 폴더에 분리해서 설정해주고 store.js 에 각각의 설정을 추가하여 사용합니다. vuex 관련 개념들은 Vuex에 친절하게 잘 나와 있습니다. VueJS는 대부분 관련 문서들이 한글화 되어 있어 참 좋습니다. ^^ 1234567891011121314151617src├── data│ └── stocks.js├── components│ ├── Header.vue│ ├── Home.vue│ ├── portfolio│ │ ├── Portfolio.vue│ │ └── Stock.vue│ └── stocks│ ├── Stock.vue│ └── Stocks.vue└── store ├── store.js └── modules ├── stocks.js └── portpolio.js 2. stocks.js 모듈 구현하기 컴포넌트 단위 별로 분리하여 설정하기로 하였기 때문에 Stocks 관련 설정 먼저 해줍니다. vuex를 구성하는 핵심 기능은 state, mutation, action, getter 입니다. 각각에 대한 상세한 개념은 Vuex-State 를 참고해주세요. 먼저 initStocks action을 사용 가능하도록 구현하기 위해 Stocks.vue 에서 배열 데이타를 컴포넌트에 직접 추가해서 사용했던 것을 별도 파일로 data 폴더에 분리시켜 가져오도록 하는 방식으로 데이타를 초기화 하는 기능을 구현합니다. data 폴더는 임시로 사용하는 것이고, 나중에 삭제하셔도 됩니다. 다다음 포스팅 쯤에서 vue-resource를 활용해서 firebase를 활용한 DB와 통신하는 부분을 구현 할 것입니다. buyStock, randomizeStocks action은 나중에 구현하겠습니다. src/data/stocks.js123456export default [ &#123; id: 1, name: 'BENZ', price: 200&#125;, &#123; id: 2, name: 'AUDI', price: 150&#125;, &#123; id: 3, name: 'HONDA', price: 180&#125;, &#123; id: 4, name: 'LEXUS', price: 195&#125;]; src/store/modules/stocks.js123456789101112131415161718192021222324252627282930313233343536373839import stocks from '../../data/stocks';const state = &#123; stocks: []&#125;;const mutations = &#123; 'SET_STOCKS' (state, stocks) &#123; state.stocks = stocks; &#125;, 'RND_STOCKS' (state) &#123; &#125;&#125;;const actions = &#123; buyStock: (&#123;commit&#125;, order) =&gt; &#123; commit(); &#125;, initStocks: (&#123;commit&#125;) =&gt; &#123; commit('SET_STOCKS', stocks); &#125;, randomizeStocks: (&#123;commit&#125;) =&gt; &#123; commit('RND_STOCKS'); &#125;&#125;;const getters = &#123; stocks: state =&gt; &#123; return state.stocks; &#125;&#125;;export default &#123; state, mutations, actions, getters&#125; 3. store.js, main.js 설정 추가하기 store.js 에서 사용 할 모든 모듈들을 등록해서 사용합니다. Vuex.Store 의 modules에 위에서 구현한 stocks 모듈을 등록해줍니다. src/store/store.js123456789101112import Vue from 'vue';import Vuex from 'vuex';import stocks from './modules/stocks'Vue.use(Vuex);export default new Vuex.Store(&#123; modules: &#123; stocks &#125;&#125;); store.js 는 main.js에 등록하여 사용합니다. src/main.js12345678910111213141516171819import Vue from 'vue';import VueRouter from 'vue-router';import App from './App.vue';import &#123; routes &#125; from './routes';import store from './store/store'; // store.js를 import 합니다.Vue.use(VueRouter);const router = new VueRouter(&#123; mode: 'history', routes&#125;);new Vue(&#123; el: '#app', router, store, // store를 등록해줍니다. render: h =&gt; h(App) 4. store 사용하기 main.js에 store를 등록하였기 때문에 이제 어떤 컴포넌트에서든지 별도의 설정 없이 store를 사용 할 수 있습니다. 컴포넌트 내에서 store 에 접근 하는 방법은 this.$store 입니다. 그리고 기능에 맞는 메소드를 사용하여 등록된 기능을 활용합니다. action은 this.$store.dispatch(&#39;action이름&#39;) 과 같이 사용하면 됩니다. src/App.vue12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div class=\"container\"&gt; &lt;app-header&gt;&lt;/app-header&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Header from './components/Header.vue'; export default &#123; components: &#123; 'appHeader': Header &#125;, created() &#123; this.$store.dispatch('initStocks'); // store에 등록된 action을 사용합니다. &#125; &#125;&lt;/script&gt;&lt;style&gt; body &#123; padding: 30px; &#125;&lt;/style&gt; App.vue에서 initStocks action 으로 stocks state를 초기화 해주었습니다. Stocks.vue에서 store에 등록된 state를 사용하기 위해 data에 있던 stocks는 제거합니다. 등록되어 있는 state의 값을 값을 가져오기 위해 getter를 등록하고 사용해주어야 합니다. 컴포넌트 내에서 getter를 사용하는 방밥은 this.$store.getters.메소드이름 입니다. 자식 컴포넌트로 props를 전달하는 부분에서 본인이 이름이 햇갈려서 props의 이름을 propStock 으로 변경하였습니다. Stock.vue 에서도 전달 받는 props의 이름을 props: [&#39;propStock&#39;] 과 같이 변경해주고 관련된 변수들을 모두 변경해주셔야 합니다. src/components/stocks/Stocks.vue12345678910111213141516171819&lt;template&gt; &lt;div&gt; &lt;app-stock v-for=\"stock in stocks\" :propStock=\"stock\"&gt;&lt;/app-stock&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Stock from './Stock.vue'; export default &#123; components: &#123; appStock: Stock &#125;, computed: &#123; stocks() &#123; return this.$store.getters.stocks; // getter로 현재 state 값을 가져옵니다. &#125; &#125; &#125;&lt;/script&gt; 모두 완료되었다면 아래와 같이 data/stocks.js에 있는 데이타에 따라 Stock 컴포넌트들이 출력 될 것입니다.git clone 으로 프로젝트를 시작하셨다면 git checkout step04 로 이번 포스팅의 마지막 결과물을 확인 하실 수 있습니다.다음 포스팅에서는 Portfolio 컴포넌트의 상태 설정을 추가하고 Stocks 컴포넌트와 함께 state의 변화에 따라 View 가 갱신 되는 부분까지 구현해보겠습니다.한번에 해보려고 했더니 너무 길어질 것 같아서 여기서 끊고 추후에 진행해보려 합니다. ㅎㅎ 별거 없는 내용인데도 손이 느려서 시간이 꽤 걸리네요.필요하신 부분이나 보완할 점이 있다면 댓글로 의견 남겨주시기 바랍니다. 감사합니다. - 끝 - p { margin: 0; } video, p img { width: 100%; box-shadow:0 10px 16px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19); } .stock { max-width: 400px; } .stock img { width: 100%; box-shadow:0 10px 16px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19); }","categories":[{"name":"VueJS","slug":"VueJS","permalink":"http://hanwong.github.io/categories/VueJS/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://hanwong.github.io/tags/vue/"},{"name":"vuejs","slug":"vuejs","permalink":"http://hanwong.github.io/tags/vuejs/"},{"name":"vue-resource","slug":"vue-resource","permalink":"http://hanwong.github.io/tags/vue-resource/"},{"name":"components","slug":"components","permalink":"http://hanwong.github.io/tags/components/"},{"name":"vue-router","slug":"vue-router","permalink":"http://hanwong.github.io/tags/vue-router/"},{"name":"vuex","slug":"vuex","permalink":"http://hanwong.github.io/tags/vuex/"}]},{"title":"VueJS | Stock-Trader Project Tutorial (1)","slug":"vue-stock-trader-01","date":"2017-04-07T15:00:00.000Z","updated":"2017-05-06T05:11:46.000Z","comments":true,"path":"2017/04/08/vue-stock-trader-01/","link":"","permalink":"http://hanwong.github.io/2017/04/08/vue-stock-trader-01/","excerpt":"이 포스팅은 Max의 Vuejs 강좌 내용을 정리한 것이고, VueJS의 개념을 익히고 연습해보기 위한 튜토리얼을 다룬 글 입니다. 프로젝트 소개 이 프로젝트는 아래의 영상과 같이 VueJS를 활용해서 간단한 모의 주식 시스템을 만들어보는것 입니다. 주식 리스트들이 있고 End Day 버튼을 누르면 시세가 랜덤하게 변경되고 시세에 따라 사고 팔고하는 리스트가 저장되도록 만들어 보는것 입니다. vue-router, vue-resource, vuex를 활용해서 간단한 VueJS 프로젝트를 구성해보고 개념을 익히는 것이 목적입니다. 개인적으로 학습을 하면서 느꼈던 것이 이렇게 전체적으로 프로젝트를 구성하는 튜토리얼을 따라해보는 것이 많은 도움이되었던것 같아 본인의 개념도 좀 더 다지고 공부한 내용을 공유하고자 이 포스팅을 시작하게 되었습니다. 심도 있는 내용은 아니기 때문에 초보자 분들에게 도움이 되었으면 합니다.","text":"이 포스팅은 Max의 Vuejs 강좌 내용을 정리한 것이고, VueJS의 개념을 익히고 연습해보기 위한 튜토리얼을 다룬 글 입니다. 프로젝트 소개 이 프로젝트는 아래의 영상과 같이 VueJS를 활용해서 간단한 모의 주식 시스템을 만들어보는것 입니다. 주식 리스트들이 있고 End Day 버튼을 누르면 시세가 랜덤하게 변경되고 시세에 따라 사고 팔고하는 리스트가 저장되도록 만들어 보는것 입니다. vue-router, vue-resource, vuex를 활용해서 간단한 VueJS 프로젝트를 구성해보고 개념을 익히는 것이 목적입니다. 개인적으로 학습을 하면서 느꼈던 것이 이렇게 전체적으로 프로젝트를 구성하는 튜토리얼을 따라해보는 것이 많은 도움이되었던것 같아 본인의 개념도 좀 더 다지고 공부한 내용을 공유하고자 이 포스팅을 시작하게 되었습니다. 심도 있는 내용은 아니기 때문에 초보자 분들에게 도움이 되었으면 합니다. 이번 포스팅에서는 프로젝트에 사용될 컴포넌트 파일들과 폴더 구조를 생성하고 vue-router 로 라우팅 설정을 하여 페이지 이동이 가능한 내비게이션까지 만들고자 합니다. 1. 프로젝트 세팅 프로젝트 기본 세팅은 아래의 git 주소를 통해서 해도 되고 vue-cli를 통해서 기본 세팅을 하셔도 괜찮습니다. 프로젝트 기본 소스 복사 - git clone https://github.com/hanwong/vue-stock-trader.git 의존모듈 설치 - npm install 로컬 서버 실행 - npm run dev 2. 컴포넌트 파일 생성하기 먼저 아래의 파일 구조와 같이 src 폴더 아래에 화면을 구성할 컴포넌트 폴더와 파일을 생성합니다. 그리고 아래에 예제 코드를 각각의 .vue 파일에 추가하고 &lt;h1&gt; ... &lt;/h1&gt;의 내용을 각 파일에 맞게 수정해주면 됩니다. src/components/Home.vue12345&lt;template&gt; &lt;div&gt; &lt;h1&gt;Home&lt;/h1&gt; &lt;/div&gt;&lt;/template&gt; 12345678910src└── components ├── Header.vue ├── Home.vue ├── portfolio │ ├── Portfolio.vue │ └── Stock.vue └── stocks ├── Stock.vue └── Stocks.vue 3. vue-router 세팅하기 vue-router는 다들 아시다시피 VueJS에서 페이지 라우팅을 도와주는 고마운 모듈입니다. 이번 프로젝트에서는 페이지나 세팅할 내용이 많지 않아서 초기 세팅 이후에 별도로 추가할 내용이 없어 아주 간단한 라우팅 구성만 해주면 됩니다. 1. 가장 먼저 vue-router 모듈을 설치해줍니다.npm instal --save vue-router 그리고 이후에 spread operator를 사용하기 때문에 미리 babel모듈도 설치해줍니다.npm install --save-dev babel-preset-stage-2 2. 라우트 설정들을 입력할 routes.js 파일을 src폴더 안에 생성합니다. 이 프로젝트에서 보여지는 페이지는 Home.vue, Stocks.vue, Portfolio.vue 입니다. 그래서 각 파일들을 각각의 url로 호출 할 수 있도록 라우팅을 구성합니다. Home.vue는 메인 화면이므로 url을 / 로 Stocks.vue는 /stocks, Portfolio.vue는 /portfolio 로 설정하였습니다. 코드의 내용은 각각의 컴포넌트들을 import 해주고 main.js 전체 설정에 추가 할 수 있도록 routes 배열 객체 안에 설정하여 export 합니다. 설정 내용은 아래의 코드와 같습니다. src/routes.js123456789import Home from './components/Home.vue';import Portfolio from './components/portfolio/Portfolio.vue';import Stocks from './components/stocks/Stocks.vue';export const routes = [ &#123; path: '/', component: Home &#125;, &#123; path: '/portfolio', component: Portfolio &#125;, &#123; path: '/stocks', component: Stocks &#125;,]; 3. routes.js 의 설정이 끝났으면 이 프로젝트의 전체 설정을 하는 main.js에 라우팅 설정을 추가해줍니다. 아래 코드에서 주석이 달려 있는 부분들의 코드를 main.js에 추가합니다. src/main.js123456789101112131415161718import Vue from 'vue';import VueRouter from 'vue-router'; // importing vue-router import App from './App.vue';import &#123; routes &#125; from './routes'; // importing routes Vue.use(VueRouter); // vue-router 플러그인 사용const router = new VueRouter(&#123; // vue-router 설정 mode: 'history', // hashbang 사용하지 않는 모드 설정 routes // 라우팅 설정&#125;);new Vue(&#123; el: '#app', router, // vue-router 설정을 Vue 인스턴스에 추가 render: h =&gt; h(App)&#125;); 4. 마지막으로 App.vue 파일에 라우팅의 시작점 설정을 해줍니다. 라우팅 시작점을 설정하는 태그 &lt;router-view&gt;&lt;/router-view&gt; 를 가장 상위 컴포넌트인 App.vue 에 추가해줍니다. src/App.vue123456&lt;template&gt; &lt;div class=\"container\"&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;!-- 라우팅 시작점 --&gt; &lt;/div&gt;&lt;/template&gt;... 여기까지 완료가 되면 라우팅 설정이 완료된것 입니다. 여기까지 에러 없이 동작이 된다고 하면 로컬 url 뒤에 /stocks나 /portfolio를 입력해서 페이지가 변환되는 것을 확인 할 수 있습니다. 4. 내비게이션을 만들기1. 마지막 단계로 설정된 url을 통해서 페이지를 이동하는 내비게이션을 만듭니다. Header.vue 파일에 아래의 코드를 추가합니다. 이 코드는 bootstrap ui 를 참고하여 제작되었습니다. url 링크를 설정하는 디렉티브는 &lt;router-link&gt;&lt;/router-link&gt; 이고, 이 디렉티브 안에 to=&quot;/stocks&quot;와 같이 속성을 추가해주면 해당 url로 이동 가능하게 됩니다. src/components/Header.vue1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;nav class=\"navbar navbar-default\"&gt; &lt;div class=\"container-fluid\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;router-link to=\"/\" class=\"navbar-brand\"&gt;Stock Trader&lt;/router-link&gt; &lt;/div&gt; &lt;div class=\"collapse navbar-collapse\" &gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;router-link to=\"/portfolio\" activeClass=\"active\" tag=\"li\"&gt;&lt;a&gt;Portfolio&lt;/a&gt;&lt;/router-link&gt; &lt;router-link to=\"/stocks\" activeClass=\"active\" tag=\"li\"&gt;&lt;a&gt;Stocks&lt;/a&gt;&lt;/router-link&gt; &lt;/ul&gt; &lt;ul class=\"nav navbar-nav navbar-right\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;End Day&lt;/a&gt;&lt;/li&gt; &lt;li class=\"dropdown\"&gt; &lt;a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt;Save&amp;amp;Load&lt;span class=\"caret\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class=\"dropdown-menu\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Save Data&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Load Data&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/div&gt;&lt;!-- /.container-fluid --&gt; &lt;/nav&gt;&lt;/template&gt; 2. 내비게이션으로 활용하기 위해 App.vue 에 Header.vue 컴포넌트를 추가하여 모든 페이지에서 보이도록 합니다. .vue 파일들은 한 파일안에 template, script, style 을 모두 설정할 수 있습니다. 먼저 &lt;script&gt; 영역에 Header.vue 객체로 사용할 수 있도록 import 해줍니다. 그리고 components 옵션 안에 디렉티브로 사용할 이름과 import한 객체를 설정해줍니다. 그 다음 &lt;template&gt; 영역에 router-view 부분은 Home, Stock, Portpolio 페이지가 보여지는 부분이므로 분리를 해주고, &lt;script&gt; 영역에서 설정한 디렉티브를 추가합니다. 컴포넌트의 이름 설정은 &lt;script&gt; 영역에서 camelCase로 설정하면 &lt;template&gt; 영역에서는 kebab-case 형태로 사용하여야 합니다. 그리고 간단하게 &lt;style&gt; 영역에는 패딩을 추가하여 맨 윗부분에 조금 간격을 두었습니다. src/App.vue12345678910111213141516171819202122232425&lt;template&gt; &lt;div class=\"container\"&gt; &lt;app-header&gt;&lt;/app-header&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Header from './components/Header.vue'; export default &#123; components: &#123; 'appHeader': Header &#125; &#125;&lt;/script&gt;&lt;style&gt; body &#123; padding: 30px; &#125;&lt;/style&gt; 모두 완료되었다면 아래와 같은 화면이 출력될 것이고 내비게이션 버튼을 통해 페이지 이동이 가능할 것입니다.git clone 으로 프로젝트를 시작하셨다면 git checkout step02 로 이번 포스팅의 마지막 결과물을 확인 하실 수 있습니다.다음 편에서는 컴포넌트에 기능을 추가하고 데이터 상태 관리를 할 수 있는 vuex까지 다뤄보도록 하겠습니다.필요하신 부분이나 보완할 점이 있다면 댓글로 의견 남겨주시기 바랍니다. 감사합니다. - 끝 - p { margin: 0; } video, p img { width: 100%; box-shadow:0 10px 16px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19); }","categories":[{"name":"VueJS","slug":"VueJS","permalink":"http://hanwong.github.io/categories/VueJS/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://hanwong.github.io/tags/vue/"},{"name":"vuejs","slug":"vuejs","permalink":"http://hanwong.github.io/tags/vuejs/"},{"name":"components","slug":"components","permalink":"http://hanwong.github.io/tags/components/"},{"name":"vue-router","slug":"vue-router","permalink":"http://hanwong.github.io/tags/vue-router/"},{"name":"vuex","slug":"vuex","permalink":"http://hanwong.github.io/tags/vuex/"}]},{"title":"VueJS 공부하기 (3) | vue-resource - interceptors, $resource","slug":"vue-resource-firebase03","date":"2017-02-24T15:00:00.000Z","updated":"2017-05-06T05:14:15.000Z","comments":true,"path":"2017/02/25/vue-resource-firebase03/","link":"","permalink":"http://hanwong.github.io/2017/02/25/vue-resource-firebase03/","excerpt":"firebase를 아주 간단한 하게 활용해서 vue-resource를 아주 간단하게 체험해보기이 포스팅은 Max의 Vuejs 강좌 내용을 정리한것 입니다. 이번 포스팅에서는 interceptors와 resource에 대해서 알아 볼 것입니다.","text":"firebase를 아주 간단한 하게 활용해서 vue-resource를 아주 간단하게 체험해보기이 포스팅은 Max의 Vuejs 강좌 내용을 정리한것 입니다. 이번 포스팅에서는 interceptors와 resource에 대해서 알아 볼 것입니다. interceptors 인터셉터는 전역에서 request, response 프로세스 이전 이후에 필요한 조건들을 처리 할 수 있습니다. Intercepting Request– 요청을 인터셉트하는 예제에서는 간단히 POST 메소드로 요청시에 PUT 메소드로 변경해서 처리를 하는 것을 구현하였습니다. main.js123456789...Vue.http.interceptors.push((request, next) =&gt; &#123; console.log(request); if(request.method === 'POST') &#123; request.method = 'PUT'; &#125; next();&#125;);... Intercepting Response– 인터셉터를 사용하면 응답이 왔을 때에도 데이터를 필요한 형태의 구조로 변경해서 반환해주는 처리를 할 수 있도록 구현 할 수 있습니다. main.js12345... next(response =&gt; &#123; response.json = () =&gt; &#123; return &#123; message: response.body &#125; &#125;; &#125;);... resource resource를 사용하면 $http 보다 더욱 간편하고 좀 더 RESTful하게 사용 할 수 있는것 같습니다.– 전역에서는 Vue.resource로 사용 할 수 있고 개별 인스턴스 안에서는 this.$resource로 사용 할 수 있습니다.– resource(url, [params], [actions], [options]) 1. resource 기본 세팅 먼저 data에 resource를 활용할 객체를 하나 선언합니다. created() hook 함수 안에 $resource 서비스를 참조해줍니다. 그러면 resource를 활용하기 위한 기본적인 설정은 완료되었습니다. App.vue1234567891011data() &#123; return &#123; ... resource: &#123;&#125; &#125;;&#125;,......created() &#123; this.resource = this.$resource('data.json');&#125; 2. submit() 메소드 수정하기 기존에 $http를 사용하던 부분은 주석 처리를 해줍니다. 그리고 this.resource.save에 전송할 this.user를 argument로 넣습니다.– save와 같이 기본적으로 get, save, query, update, remove, delete 내장 메소드를 제공해줘서 편하게 사용할 수 있습니다. App.vue12345678910submit() &#123; // this.$http // .post('data.json', this.user) // .then(response =&gt; &#123; // console.log(response); // &#125;, error =&gt; &#123; // console.log(error); // &#125;); this.resource.save(&#123;&#125;, this.user);&#125; 3. fetchData() 메소드 수정하기 get을 사용하는 것도 크게 다르지 않습니다. $http 대신에 resource로 바꿔주면 됩니다.– this.resource.get()에 url이 포함 되어 있지 않은 이유는 위에서 초기 설정에 지정을 해두어서 필요하지 않은것입니다. 초기 설정에 url 값을 넣어주지 않는다면 각 메소드들에서 직접 설정해도 됩니다. App.vue123456789101112131415fetchData() &#123; // this.$http // .get('data.json') this.resource.get() .then(response =&gt; &#123; return response.json(); &#125;) .then(data =&gt; &#123; const resultArray = []; for ( let key in data ) &#123; resultArray.push(data[key]); &#125; this.users = resultArray; &#125;);&#125; 해당 예제와 관련된 소스는 아래 링크를 참조하시기 바랍니다.[resource예제] - 끝 -","categories":[{"name":"VueJS","slug":"VueJS","permalink":"http://hanwong.github.io/categories/VueJS/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://hanwong.github.io/tags/vue/"},{"name":"vuejs","slug":"vuejs","permalink":"http://hanwong.github.io/tags/vuejs/"},{"name":"vue-resource","slug":"vue-resource","permalink":"http://hanwong.github.io/tags/vue-resource/"},{"name":"firebase","slug":"firebase","permalink":"http://hanwong.github.io/tags/firebase/"},{"name":"http","slug":"http","permalink":"http://hanwong.github.io/tags/http/"},{"name":"interceptors","slug":"interceptors","permalink":"http://hanwong.github.io/tags/interceptors/"},{"name":"resource","slug":"resource","permalink":"http://hanwong.github.io/tags/resource/"},{"name":"$resource","slug":"resource","permalink":"http://hanwong.github.io/tags/resource/"}]},{"title":"VueJS 공부하기 (2) | vue-resource - $http.get()","slug":"vue-resource-firebase02","date":"2017-02-11T15:00:00.000Z","updated":"2017-05-06T05:08:51.000Z","comments":true,"path":"2017/02/12/vue-resource-firebase02/","link":"","permalink":"http://hanwong.github.io/2017/02/12/vue-resource-firebase02/","excerpt":"firebase를 아주 간단한 하게 활용해서 vue-resource를 아주 간단하게 체험해보기이 포스팅은 Max의 Vuejs 강좌 내용을 정리한것 입니다. 이번 포스팅에서는 이전 포스트에 이어서 데이타베이스에서 데이타를 가져오는 방법에 대해서 알아 볼 것입니다.","text":"firebase를 아주 간단한 하게 활용해서 vue-resource를 아주 간단하게 체험해보기이 포스팅은 Max의 Vuejs 강좌 내용을 정리한것 입니다. 이번 포스팅에서는 이전 포스트에 이어서 데이타베이스에서 데이타를 가져오는 방법에 대해서 알아 볼 것입니다. 데이타를 저장할 변수 설정 가져올 데이타를 저장하는 변수 추가 users: [] 이 부분임 App.vue123456789data() &#123; return &#123; user: &#123; username: '', mail: '' &#125;, users: [] &#125;;&#125;, 데이타를 불러오는 메소드 설정 데이타를 호출하는 메소드 추가 첫번째 응답에서 response.json()로 받은 데이타는 promise 객체가 리턴된다. 다시 한번 then을 사용하면 우리가 원하는 데이타 만 가진 객체가 리턴된다. 그 데이타를 다시 한번 써먹을 수 있게 iteration 해주고 위에서 만든 변수에 저장한다. App.vue1234567891011121314fetchData() &#123; this.$http .get('https://your-project.firebaseio.com/data.json') .then(response =&gt; &#123; return response.json(); &#125;) .then(data =&gt; &#123; const resultArray = []; for ( let key in data ) &#123; resultArray.push(data[key]); &#125; this.users = resultArray; &#125;);&#125; fetchData 메소드를 실행할 버튼과 결과 리스트 만들기 버튼을 클릭 했을 때 fetchData 메소드로 데이타를 호출하는 버튼 생성 호출된 데이타가 users 배열에 저장되고 해당 데이터 결과를 리스트로 출력 App.vue123456&lt;button class=\"btn btn-primary\" @click=\"fetchData\"&gt;GetData&lt;/button&gt;&lt;br&gt;&lt;br&gt;&lt;ul class=\"list-group\"&gt; &lt;li class=\"list-group-item\" v-for=\"u in users\"&gt;&#123;&#123;u.username&#125;&#125; - &#123;&#123;u.mail&#125;&#125;&lt;/li&gt;&lt;/ul&gt; 공통 url 설정 Vue.http.options.root 사용하기 url의 반복되는 root 부분을 main.js에 설정해 놓으면 하위 구조에서는 편하게 필요한 정보만 입력 할 수 있게 해줌 main.js1Vue.http.options.root = 'https://your-project.firebaseio.com/'; 위와 같이 설정해 놓으면 post, get 사용시 좀 더 편리할 듯 App.vue1234567...this.$http .post('data.json', this.user)...this.$http .get('data.json')... - 끝 - p img { width: 80%; box-shadow:0 10px 16px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19); }","categories":[{"name":"VueJS","slug":"VueJS","permalink":"http://hanwong.github.io/categories/VueJS/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://hanwong.github.io/tags/vue/"},{"name":"vuejs","slug":"vuejs","permalink":"http://hanwong.github.io/tags/vuejs/"},{"name":"vue-resource","slug":"vue-resource","permalink":"http://hanwong.github.io/tags/vue-resource/"},{"name":"firebase","slug":"firebase","permalink":"http://hanwong.github.io/tags/firebase/"},{"name":"http","slug":"http","permalink":"http://hanwong.github.io/tags/http/"}]},{"title":"VueJS 공부하기 (1) | vue-resource - $http.post()","slug":"vue-resource-firebase01","date":"2017-02-10T15:00:00.000Z","updated":"2017-05-06T05:08:16.000Z","comments":true,"path":"2017/02/11/vue-resource-firebase01/","link":"","permalink":"http://hanwong.github.io/2017/02/11/vue-resource-firebase01/","excerpt":"firebase를 아주 간단한 하게 활용해서 vue-resource를 아주 간단하게 체험해보기이 포스팅은 Max의 Vuejs 강좌 내용을 정리한것 입니다.","text":"firebase를 아주 간단한 하게 활용해서 vue-resource를 아주 간단하게 체험해보기이 포스팅은 Max의 Vuejs 강좌 내용을 정리한것 입니다. VusJS 개발 환경 초기 세팅 필자 github의 소스를 모두 다운 받고 package.json 파일이 있는 위치에서 npm install github에서 소스를 다운로드 받는게 번거롭다는 생각이 든다면 크롬 브라우저의 octotree 확장 프로그램 설치를 권장함 패키지가 설치된 뒤에 npm run dev 하면 브라우저에 짠~ 하고 알아서 켜지고 아래와 같이 빈화면이 출력됨 vue-resource 설정 vue-resource를 main.js 파일에 설정함 12345...import VueResource from 'vue-resource'...Vue.use(VueResource);... 입력 폼 만둘기 기본 폼 동작 테스트 App.vue 파일 template, script 에 코드 작성 123456789&lt;div class=\"form-group\"&gt; &lt;label&gt;UserName&lt;/label&gt; &lt;input type=\"text\" class=\"form-control\" v-model=\"user.username\"&gt;&lt;/div&gt;&lt;div class=\"form-group\"&gt; &lt;label&gt;Mail&lt;/label&gt; &lt;input type=\"text\" class=\"form-control\" v-model=\"user.mail\"&gt;&lt;/div&gt;&lt;button class=\"btn btn-primary\" @click=\"submit\"&gt;Submit&lt;/button&gt; 123456789101112131415export default &#123; data() &#123; return &#123; user: &#123; username: '', mail: '' &#125; &#125;; &#125;, methods: &#123; submit() &#123; console.log(this.user); &#125; &#125;&#125; firebase 초기 세팅 firebase로 테스팅을 위한 DB 환경 설정 계정 생성 프로젝트 생성 데이터베이스(Database) - 규칙(Rule) 에서 .read, .write 값을 모두 true로 변경 아주 간단하게 그림으로 따라 해보기 vue-resource - $http.post() $http.post()로 데이터 보내기 post 메소드 내에 첫번째 argument로 본인의 데이터베이스 주소 뒤에 data.json을 붙여서 입력하고, 다음 argument로 보낼 데이터를 입력 data.json을 붙이는 것은 내 데이터베이스의 data라는 공간에 json 형식으로 저장한다라고 생각하면 됨 promise를 당연히 지원해주므로 then 메소드에 성공, 실패에 대한 처리를 해줌 성공시 응답 메세지, 실패시 에러 메세지 12345678910111213... methods: &#123; submit() &#123; this.$http .post('https://your-project.firebaseio.com/data.json', this.user) .then(response =&gt; &#123; console.log(response); &#125;, error =&gt; &#123; console.log(error); &#125;); &#125; &#125;... 그러면 성공을 할 것이므로 아래와 같은 결과가 나올것임 - 끝 - p img { width: 80%; box-shadow:0 10px 16px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19); }","categories":[{"name":"VueJS","slug":"VueJS","permalink":"http://hanwong.github.io/categories/VueJS/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://hanwong.github.io/tags/vue/"},{"name":"vuejs","slug":"vuejs","permalink":"http://hanwong.github.io/tags/vuejs/"},{"name":"vue-resource","slug":"vue-resource","permalink":"http://hanwong.github.io/tags/vue-resource/"},{"name":"firebase","slug":"firebase","permalink":"http://hanwong.github.io/tags/firebase/"},{"name":"http","slug":"http","permalink":"http://hanwong.github.io/tags/http/"}]},{"title":"Extended Isolate Float Technique","slug":"Isolate-Float","date":"2016-07-22T15:00:00.000Z","updated":"2017-05-06T05:14:55.000Z","comments":true,"path":"2016/07/23/Isolate-Float/","link":"","permalink":"http://hanwong.github.io/2016/07/23/Isolate-Float/","excerpt":"기존의 Isolate Float 기술을 이용해 다양한 사이즈의 박스들을 배치해보려고 이것저것 해보다가 조금 업데이트한 방법을 공유합니다.","text":"기존의 Isolate Float 기술을 이용해 다양한 사이즈의 박스들을 배치해보려고 이것저것 해보다가 조금 업데이트한 방법을 공유합니다. Floating boxCSS를 배우기 시작하면서 float만을 가지고 박스들을 원하는 위치에 배치하기는 쉽지 않았었습니다.약간의 크기 차이만 생겨도 다음 라인으로 떨어지거나 다음 라인에서도 튀어나와 있는 박스에 걸리거나 하면서 조금 복잡한 레이아웃을 구성하다 보면 뒷골 땡기는 일이 많이 생기죠.그리고 float된 박스들을 비율 값으로 배치할 때 발생하는 Sub-Pixel Problem 과 같은 것들도 있어 브라우저마다 다른 결과 때문에 애를 먹기도 한다고 합니다. 아직 실무를 해본 건 아니라 이 문제가 피부에 와 닿지는 않지만 아무튼 컨트롤 하기 어려운 아이라는 거죠.아무튼 조금 더 다양한 기법들을 배우기 시작하면서 Isolate Float 방식으로 float된 박스를 배치하는 방식을 알게 되었고 이것을 여러 예제에 이용해보고자 하였습니다. Isolate Float먼저 알게 된 기존의 Isolate technique 은 하나의 행 안에서 박스들을 이동하는 방식이었습니다. 하나의 행 안에서 박스들의 순서를 바꾸기도 쉽고 Sub-Pixel Problem도 해결할 수 있었습니다. Extended Isolate Float 이 방식은 제멋대로 이름을 한번 붙여 본 거고, 검색 능력이 부족한 것인지 같은 방식을 쓰는 사례는 찾지 못했습니다. 123.iso-box &#123; margin-right: -100%;&#125; 이 코드가 기존 방식의 핵심이죠. float: left된 박스들 모두에게 margin-right: -100%; 속성을 준 후에 margin-left 속성으로 그 페이지의 그리드 시스템에 맞게 배치하는 방식이었습니다. 그런데 한 디자인 예제를 구현해보면서 박스의 사이즈가 다양해 이 방법만으로는 레이아웃을 구성하기가 어려워서 고민하던 중에 margin-top을 활용해서 행 뿐만 아니라 열에도 Isolate Technique이 가능하지 않을까 생각이 들어서 한번 해보았습니다. 1234.iso-box &#123; margin-top: -100%; margin-right: -100%;&#125; 그리고 요런 식으로 그리드 시스템도 구성했습니다. 12345678910.iso-col-1 &#123; margin-top: calc(20%*0); &#125;.iso-col-2 &#123; margin-top: calc(20%*1); &#125;.iso-col-3 &#123; margin-top: calc(20%*2); &#125;.iso-col-4 &#123; margin-top: calc(20%*3); &#125;.iso-col-5 &#123; margin-top: calc(20%*4); &#125;.iso-row-1 &#123; margin-left: calc(20%*0); &#125;.iso-row-2 &#123; margin-left: calc(20%*1); &#125;.iso-row-3 &#123; margin-left: calc(20%*2); &#125;.iso-row-4 &#123; margin-left: calc(20%*3); &#125;.iso-row-5 &#123; margin-left: calc(20%*4); &#125; 해봤더니 되더라구요… 이렇게 배치된 박스들을 ~ .iso-box { margin-top: -100%; margin-right: -100%; } .iso-col-0 { margin-top: 0%; } .iso-col-1 { margin-top: 20%; } .iso-col-2 { margin-top: 40%; } .iso-col-3 { margin-top: 60%; } .iso-col-4 { margin-top: 80%; } .iso-row-0 { margin-left: 0%; } .iso-row-1 { margin-left: 20%; } .iso-row-2 { margin-left: 40%; } .iso-row-3 { margin-left: 60%; } .iso-row-4 { margin-left: 80%; } .container { width: 100%; } .wrapper1, .wrapper2 { width: 500px; height: 100px; margin-right: auto; margin-left: auto; margin-bottom: 50px; } .wrapper2 { height: 500px; outline: 3px solid #999999; } .container::after { display: block; content: ''; clear: both; } .box1, .box2, .box3, .box4, .box5 { float: left; width: 100px; height: 100px; line-height: 100px; text-align: center; } .box1 { background: #FF6666; color: #fff; } .box2 { background: #FFCC66; color: #fff; } .box3 { background: #66CCFF; color: #fff; } .box4 { background: #CC66FF; color: #fff; } .box5 { background: #FFA3CF; color: #fff; } box1box2box3box4box5 이렇게 내 맘대로 아무 데나 배치할 수 있습니다. box1box2box3box4box5box1box2box3box4box5 12&lt;div class=\"box1 iso-box iso-col-1 iso-row-0\"&gt;box1&lt;/div&gt;&lt;div class=\"box2 iso-box iso-col-2 iso-row-1\"&gt;box2&lt;/div&gt; 위와 같이 일정한 그리드 시스템을 가진 컨테이너 안에서는 각 박스 아이템의 클래스를 조정해서 엑셀을 사용하듯이(?) 아주 쉽게(?) ㅎㅎ 아무튼 원하는 레이아웃으로 박스를 배치하기에 조금 쉬운 방법이 아닐까 생각합니다. 그리고 물론 CSS에서 높이 값을 조절하는 데는 한계가 많죠. 이 방법도 박스들을 담고 있는 컨테이너가 높이 값을 가지고 있지 않거나 clearfix가 적용되어 있지 않다면 레이아웃이 무너질 수도 있을 것입니다. 아무튼 이 방법은 최근에 알게된 내용을 활용하다가 조금 확장해본 방법입니다. 요즘은 flex나 다른 프레임웍을 이용한 더 훌륭한 방법들도 많지만 이 방법도 어떤지 한번 참고 해보시고 보완할 점이나 더 좋은 방법들이 있다면 피드백 주시면 감사하겠습니다.","categories":[{"name":"CSS","slug":"CSS","permalink":"http://hanwong.github.io/categories/CSS/"}],"tags":[{"name":"css","slug":"css","permalink":"http://hanwong.github.io/tags/css/"},{"name":"grid","slug":"grid","permalink":"http://hanwong.github.io/tags/grid/"},{"name":"layout","slug":"layout","permalink":"http://hanwong.github.io/tags/layout/"},{"name":"isolate-float","slug":"isolate-float","permalink":"http://hanwong.github.io/tags/isolate-float/"},{"name":"isolate-technique","slug":"isolate-technique","permalink":"http://hanwong.github.io/tags/isolate-technique/"}]},{"title":"HTML & CSS Code Guide","slug":"Code-Guide","date":"2016-07-21T15:00:00.000Z","updated":"2017-05-06T05:10:49.000Z","comments":true,"path":"2016/07/22/Code-Guide/","link":"","permalink":"http://hanwong.github.io/2016/07/22/Code-Guide/","excerpt":"HTML, CSS 환경에서 코딩 할 때 알아두면 좋을 가이드들을 정리하고 있습니다.","text":"HTML, CSS 환경에서 코딩 할 때 알아두면 좋을 가이드들을 정리하고 있습니다. HTML CSS HTML Syntax HTML5 doctype Language attribute Internet Explorer compatibility mode Character encoding CSS and JavaScript includes Attribute order Reducing markup Sectioning markup Entity Code Syntax123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=\"ko-KR\"&gt;&lt;head&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=\"images/company-logo.png\" alt=\"Company\"&gt; &lt;h1 class=\"hello-world\"&gt;Hello, world!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; Indentation 직계 자식 요소는 ・ ・ , Space 두칸을 이용하여 들여쓰기 한다. img 요소의 alt속성은 반드시 의미 있는 단어를 사용한다. 별다른 의미를 가지지 않는 이미지의 경우 background속성을 활용한다. HTML5 doctype1&lt;!DOCTYPE html&gt; HTML5 표준 사용을 위해 위의 Doctype을 사용한다. Doctype 코드는 반드시 문서 첫줄에 명시한다. 코드의 윗부분에는 절대로 아무런 요소도 삽입하지 않는다. Language attribute12345&lt;html lang=\"ko-KR\"&gt; [・・・] &lt;section lang=\"en\"&gt;English&lt;/section&gt; [・・・]&lt;/html&gt; 문서에 쓰이는 주언어를 html 요소에 삽입한다. 문서 중간에 다른 언어를 사용하는 경우 해당 언어의 속성을 명시한다. Internet Explorer compatibility mode1234567&lt;!--[if IE 6]&gt;&lt;html lang=\"ko-KR\" class=\"ie6\"&gt;&lt;![endif]--&gt;&lt;!--[if IE 7]&gt;&lt;html lang=\"ko-KR\" class=\"ie7\"&gt;&lt;![endif]--&gt;&lt;!--[if IE 8]&gt;&lt;html lang=\"ko-KR\" class=\"ie8\"&gt;&lt;![endif]--&gt;&lt;!--[if IE 9]&gt;&lt;html lang=\"ko-KR\" class=\"ie9\"&gt;&lt;![endif]--&gt;&lt;!--[if !IE]&gt;&lt;!--&gt;&lt;html lang=\"ko-KR\"&gt;&lt;!--&lt;![endif]--&gt;[・・・]&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\"&gt; IE 하위 버전 호환이 필요한 경우 IE 조건부 주석문을 활용하여 각 버전의 클래스를 명시한다. IE 호환성 모드에 대한 대응을 위해서 최소 IE 동작 버전을 명시한다. Character encoding1&lt;meta charset=\"UTF-8\"&gt; 텍스트 언어 인코딩을 UTF-8로 설정하여 모든 유니코드 문자를 표현할 수 있도록 설정하고, 깨지는 한글 문제를 해결한다. CSS and JavaScript includes1234&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;&lt;style&gt;&lt;/style&gt;&lt;script src=\"script.js\"&gt;&lt;/script&gt; link, style, script 사용시 type 속성을 별도로 입력하지 않는다. Attribute order123&lt;a class=\"...\" id=\"...\" data-modal=\"toggle\" href=\"#\"&gt;Example link&lt;/a&gt;&lt;input class=\"form-control\" type=\"text\"&gt;&lt;img src=\"...\" alt=\"...\"&gt; 코드의 가독성 향상을 위해 HTML 태그 속성들을 특정한 순서로 명시한다. class id, name data-* src, for, type, href, value title, alt aria-*, role Reducing markup 의미 없는 div, span 요소의 사용을 자제한다. &lt;b&gt;, &lt;i&gt;, &lt;u&gt;, &lt;strike&gt;, &lt;s&gt;, &lt;big&gt;, &lt;small&gt;, &lt;center&gt;, &lt;font&gt; 등 표현에 국한된 요소는 사용하지 않는다. Sectioning markup12345678910&lt;header&gt;&lt;/header&gt;&lt;section class=\"header\"&gt; &lt;nav&gt;&lt;/nav&gt;&lt;/section&gt;&lt;main&gt; &lt;section&gt;&lt;/section&gt; &lt;aside&gt;&lt;/aside&gt;&lt;/main&gt;&lt;section class=\"footer\"&gt;&lt;/section&gt;&lt;footer&gt;&lt;/footer&gt; Sectioning 요소 - section, article, main, nav, aside 화면의 전체 구조를 마크업 할 때 헤더와 푸터 영역에 Sectioning 요소를 포함하지 않으면 &lt;header&gt;, &lt;footer&gt; 태그를 사용하고, nav와 같은 Sectioning요소를 포함할 경우 &lt;section&gt;태그를 활용하여 명시한다. 헤더와 푸터 영역의 요소를 제외한 요소들은 main 요소 안에 명시한다. Entity Code1&lt;title&gt;코드 가이드 &amp;amp; 스타일&lt;/title&gt; 문서 내에서 특수문자는 반드시 Entity Code를 활용한다. 특히 title 영역에서는 &amp; 도 &amp;amp; Entity Code로 명시한다. title 이 인코딩 선언 요소보다 앞에 있을 경우에 &amp; 가 포함되어 있으면 인코딩이 제대로 이루어지지 않을 수 있다. 그래서 title를 인코딩 요소보다 뒤에 써주는 것이 좋다. CSS Declaration order Don’t use @import Classes Selectors Declaration order1234567891011121314151617181920212223242526272829.declaration-order &#123; /* Positioning */ position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: 100; /* Box-model */ display: block; float: right; width: 100px; height: 100px; /* Typography */ font: normal 13px \"Helvetica Neue\", sans-serif; line-height: 1.5; color: #333; text-align: center; /* Visual */ background-color: #f5f5f5; border: 1px solid #e5e5e5; border-radius: 3px; /* Misc */ opacity: 1;&#125; 다음과 같은 속성의 순서대로 선언한다. Positioning Box Typography Visual, Misc Don’t use @import1234&lt;link rel=\"stylesheet\" href=\"core.css\"&gt;&lt;style&gt; @import url(\"more.css\");&lt;/style&gt; CSS 파일을 연결할 때 @import를 사용하지 않고 link를 활용한다. @import는 직렬 방식으로 파일을 불러오기 때문에 성능에 영향을 미친다. Classes1234567.btn &#123; ... &#125;.btn-focus &#123; ... &#125;.btn-hover &#123; ... &#125;.line &#123; ... &#125;.line-focus &#123; ... &#125;.line-hover &#123; ... &#125; Class 명칭은 소문자를 사용하고, 단어 사이에는 - 로 구분한다. 지나친 축약 보다는 의미가 명확히 전달 가능한 이름을 사용한다. 인접한 부모 Class를 접두사로 활용한다. Selectors1234567/* Bad example */.btn.nav &#123; ... &#125;.line.nav &#123; ... &#125;/* Good example */.btn-nav &#123; ... &#125;.line-nav &#123; ... &#125; 선택자를 명시할 때 일반 요소를 지정하기 보다 Class를 지정하여 사용한다. 멀티클래스로 클래스를 나누어 사용하기 보다 접두사를 이용하여 독립적인 클래스를 선택자로 명시한다. [Scope CSS classes with prefixes]","categories":[{"name":"Guide","slug":"Guide","permalink":"http://hanwong.github.io/categories/Guide/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://hanwong.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://hanwong.github.io/tags/CSS/"},{"name":"CodeGuide","slug":"CodeGuide","permalink":"http://hanwong.github.io/tags/CodeGuide/"}]}]}